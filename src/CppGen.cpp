#include <algorithm>
#include <cctype>
#include <iostream>
#include <filesystem>

#include "CppGen.h"

blongho::CppGen::CppGen(std::string projectName, std::string projectType, std::string buildSystem,
                        std::string cppStandard, const bool &initGit)
    : projectName(std::move(projectName)), projectType(std::move(projectType)), buildSystem(std::move(buildSystem)),
      cppStd(std::move(cppStandard)),
      gitInit(initGit) {
}

void blongho::CppGen::create_directories() const {
    std::filesystem::create_directories(get_project_name() + "/src");
    std::filesystem::create_directories(get_project_name() + "/include");
    std::filesystem::create_directories(get_project_name() + "/build");
    std::filesystem::create_directories(get_project_name() + "/tests");
    std::cout << "Created directory structure for " << get_project_name() << std::endl;

    generate_files();
}

void blongho::CppGen::generate_files() const {
    std::cout << "Generating files for " << get_project_name() << std::endl;
    std::ofstream ofs(get_project_name() + "/src/main.cpp", std::ios::out | std::ios::binary);
    std::ofstream ofs_cmake(get_project_name() + "/CMakeLists.txt", std::ios::out | std::ios::binary);
    std::ofstream ofs_test_cmake(get_project_name() + "/tests/CMakeLists.txt", std::ios::out | std::ios::binary);
    try {
        if (!ofs.is_open()) {
            std::cerr << "Could not open or create main.cpp inside  " << get_project_name() << "/src" << std::endl;
            return;
        }

        ofs << generate_main_cpp() << std::endl;
        std::cout << "Generated main.cpp written to " << get_project_name() << "/src/main.cpp" << std::endl <<
                std::endl;

        if (!ofs_cmake.is_open()) {
            std::cerr << "Could not open or create CMakeLists.txt inside  " << get_project_name() << std::endl;
            return;
        }

        ofs_cmake << generate_cmake_lists() << std::endl;
        std::cout << "Generated CMake lists for " << get_project_name() << std::endl << std::endl;

        if (!ofs_test_cmake.is_open()) {
            std::cerr << "Could not open or create tests/CMakeLists.txt inside  " << get_project_name() << std::endl;
            return;
        }
        // list the directories and files
        list_directories();
    } catch (std::exception &_) {
        std::cerr << "An error occurred while generating file structure " << std::endl;
    }
}

std::string blongho::CppGen::generate_cmake_lists() const {
    std::cout << "\nGenerating " << get_project_name() << "/CMakeLists.txt...";
    return "cmake_minimum_required(VERSION 3.10...3.30)\nproject(" + get_project_name() +
           ")\nset(CMAKE_CXX_STANDARD " + cppStd + ")\n\nadd_executable(" + get_project_name() + " src/main.cpp)\n" +
           "\n#for testing\nenable_testing()\nadd_subdirectory(tests)\n";
}

std::string blongho::CppGen::generate_main_cpp() const {
    std::cout << "\nGenerating " << get_project_name() << "/src/main.cpp" << std::endl;
    return "//===AutoGenerated file from cppgen===\n#include <iostream>\n\nint main() {\n\tstd::cout << \"Hello," +
           get_project_name() +
           "!\" <<std::endl;\n\n\treturn 0;\n}\n";
}

std::string blongho::CppGen::generate_test_cmake_lists() const {
    std::cout << "\nGenerating " << get_project_name() << "/tests/CMakeLists.txt...";
    return "cmake_minimum_required(VERSION 3.10...3.30)\nproject(" + get_project_name() + "_test" +
           ")\nset(CMAKE_CXX_STANDARD " + cppStd + ")\n\nadd_executable(" + get_project_name() + " src/main.cpp)\n" +
           "\n#for testing\nenable_testing()\nadd_subdirectory(tests)\n";
}

void blongho::CppGen::list_directories() const {
    std::cout << "\nListing directories for " << get_project_name() << std::endl;
#if defined(_WIN32)
    std::system(("dir "+projectName).c_str());
#elif defined(__linux__) || defined(__unix__) || defined(__APPLE__)
    std::system(("ls -al " + get_project_name()).c_str());
#endif
}

std::string blongho::CppGen::get_project_name() const {
    std::string result = projectName;
    std::transform(result.begin(), result.end(), result.begin(), [](char c) {
        if (c == ' ') {
            c = '_'; // Replace space with underscore
        }
        return std::tolower(c);
    });
    std::cout << "Project name is " << result << std::endl;
    return result;
}

std::string blongho::CppGen::get_project_type() const {
    return projectType;
}

std::string blongho::CppGen::get_build_system() const {
    std::string result = buildSystem;
    std::transform(result.begin(), result.end(), result.begin(), [](const char c) { return std::tolower(c); });
    return result;
}

std::string blongho::CppGen::get_cpp_std() const {
    std::string projectStd = cppStd;
    if (projectStd.empty()) {
        return "17";
    }
    return projectStd.find('+') == std::string::npos ? projectStd : projectStd.substr(projectStd.find_last_of('+') + 1);
}

bool blongho::CppGen::is_git_init() const {
    return gitInit;
}


void blongho::CppGen::run() const {
    create_directories();
}
