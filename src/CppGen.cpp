#include "CppGen.h"

namespace fs = std::filesystem;

blongho::CppGen::CppGen(const std::string &projectName, const std::string &projectType, const std::string &buildSystem,
                        const std::string &cppStandard, const bool &initGit)
    : projectName(projectName), projectType(projectType), buildSystem(buildSystem), cppStd(cppStandard),
      gitInit(initGit) {
}

void blongho::CppGen::create_directories() const {
    fs::create_directories(projectName + "/src");
    fs::create_directories(projectName + "/include");
    fs::create_directories(projectName + "/build");
    std::cout << "Created directory structure for " << projectName << std::endl;

    generate_files();
}

void blongho::CppGen::generate_files() const {
    std::cout << "Generating files for " << projectName << std::endl;
    std::ofstream ofs(projectName + "/src/main.cpp", std::ios::out | std::ios::binary);
    std::ofstream ofs_cmake(projectName + "/CMakeLists.txt", std::ios::out | std::ios::binary);
    try {
        if (!ofs.is_open()) {
            std::cerr << "Could not open or create main.cpp inside  " << projectName << "/src" << std::endl;
            return;
        }

        ofs << generate_main_cpp() << std::endl;
        std::cout << "Generated main.cpp written to " << projectName << "/src" << std::endl << std::endl;

        if (!ofs_cmake.is_open()) {
            std::cerr << "Could not open or create CMakeLists.txt inside  " << projectName << std::endl;
            return;
        }

        ofs_cmake << generate_cmake_lists() << std::endl;
        std::cout << "Generated CMake lists for " << projectName << std::endl << std::endl;

        // list the directories and files
        list_directories();
    } catch (std::exception &_) {
        std::cerr << "Could not open template file " << templatePath << std::endl;
    }
}

std::string blongho::CppGen::generate_cmake_lists() const {
    std::cout << "\nGenerating " << projectName << "/CMakeLists.txt...";
    return "cmake_minimum_required(VERSION 3.10...3.30)\nproject(" + projectName +
           ")\nset(CMAKE_CXX_STANDARD " + cppStd + ")\n\nadd_executable(" + projectName + " src/main.cpp)\n";
}

std::string blongho::CppGen::generate_main_cpp() const {
    std::cout << "\nGenerating " << projectName << "/src/main.cpp" << std::endl;
    return "//===AutoGenerated file from cppgen===\n#include <iostream>\n\nint main() {\n\tstd::cout << \"Hello," +
           projectName +
           "!\" <<std::endl;\n\n\treturn 0;\n}\n";
}

void blongho::CppGen::list_directories() const {
    std::cout << "\nListing directories for " << projectName << std::endl;
#if defined(_WIN32)
    std::system(("dir "+projectName).c_str());
#elif defined(__linux__) || defined(__unix__) || defined(__APPLE__)
    std::system(("ls -al " + projectName).c_str());
#endif
}


void blongho::CppGen::run() const {
    create_directories();
}
